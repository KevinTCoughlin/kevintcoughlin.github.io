<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SVG | Kevin Coughlin]]></title>
  <link href="http://kevintcoughlin.com/blog/categories/svg/atom.xml" rel="self"/>
  <link href="http://kevintcoughlin.com/"/>
  <updated>2013-11-15T07:42:16-05:00</updated>
  <id>http://kevintcoughlin.com/</id>
  <author>
    <name><![CDATA[Kevin Coughlin]]></name>
    <email><![CDATA[kevintcoughlin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Gentle Introduction to D3.js (Part 1) - Generating N-Random Circles]]></title>
    <link href="http://kevintcoughlin.com/blog/2013/07/01/a-gentle-introduction-to-d3-dot-js/"/>
    <updated>2013-07-01T17:30:00-04:00</updated>
    <id>http://kevintcoughlin.com/blog/2013/07/01/a-gentle-introduction-to-d3-dot-js</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>In Part 1 of this D3.js introduction, we are going to append 200 circles of random size and color to random locations of a SVG (Scalable Vector Graphics) HTML element (<a href="https://developer.mozilla.org/en-US/docs/Web/SVG">Mozilla Developer Network: SVG</a>). This brief and simplistic tutorial will help familiarize you with a fraction of D3.js' core functionality and its expressive power. In later tutorials we will build upon this implementation by adding behavior to the circles.</p>

<!-- more -->


<h2>What is D3.js?</h2>

<p>Created by <a href="https://twitter.com/mbostock">@mbostock</a>, D3.js allows the developer (you!) to bind data to the Document Object Model (DOM) and then apply data-driven transitions and events to the document. Many well-known companies use the library in production such as <a href="http://www.squareup.com/">Square</a>, Mike Bostock&rsquo;s employer <a href="http://www.nytimes.com/">The New York Times</a>, and <a href="http://chartio.com/">Chart.io</a>. The library&rsquo;s homepage introduces it as:</p>

<p><blockquote><p>D3.js is a JavaScript library for manipulating documents based on data. D3 helps you bring data to life using HTML, SVG and CSS. D3â€™s emphasis on web standards gives you the full capabilities of modern browsers without tying yourself to a proprietary framework, combining powerful visualization components and a data-driven approach to DOM manipulation.</p><footer><strong>Mike Bostock <a href="http://d3js.org">http://d3js.org</a></strong></footer></blockquote></p>

<h2>Getting Started</h2>

<p>We&rsquo;ll begin by creating our HTML5 document and importing the hosted version of D3.js. It&rsquo;s important to note that when using D3.js in production, you may see better performance from linking to a popular CDN repository of the library or storing it locally. Regardless, our <code>index.html</code> document should contain the following code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>index.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>!DOCTYPE html&gt;
</span><span class='line'><span class="nt">&lt;html&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>head<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>meta charset=&quot;utf-8&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>title<span class="ni">&amp;gt;</span>D3.js Context Menu Tutorial<span class="ni">&amp;lt;</span>/title<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>script type=&quot;text/javascript&quot; src=&quot;http://d3js.org/d3.v3.min.js&quot;<span class="ni">&amp;gt;&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/head<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>body<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/body<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now that we&rsquo;ve prepared our <code>index.html</code> document, let&rsquo;s start writing our random circle generation script. First we&rsquo;ll dynamically generate a SVG element with dimensions equal to the height and width of the browser window.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>index.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>!DOCTYPE html&gt;
</span><span class='line'><span class="nt">&lt;html&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>head<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>meta charset=&quot;utf-8&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>title<span class="ni">&amp;gt;</span>D3.js Context Menu Tutorial<span class="ni">&amp;lt;</span>/title<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>script type=&quot;text/javascript&quot; src=&quot;http://d3js.org/d3.v3.min.js&quot;<span class="ni">&amp;gt;&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/head<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>body<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>script type=&quot;text/javascript&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>    var svgWidth  = window.innerWidth
</span><span class='line'>     ,  svgHeight = window.innerHeight;
</span><span class='line'>
</span><span class='line'>      // SVG we will draw to
</span><span class='line'>      var svg = d3.select(&quot;body&quot;).append(&quot;svg&quot;)
</span><span class='line'>          .attr(&quot;width&quot;, svgWidth)
</span><span class='line'>          .attr(&quot;height&quot;, svgHeight);
</span><span class='line'>    <span class="ni">&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/body<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the above code, we declare two variables <code>svgWidth</code> and <code>svgHeight</code> that contain the width and height of our browser window element. Next we create a <code>svg</code> object and append it to the HTML document&rsquo;s <code>body</code>. Similar to jQuery and Zepto.js, we use D3 to select the <code>body</code> element and then use the append method to create and append the <code>svg</code> element. We continue our chain by making the <code>svg</code> element&rsquo;s width and height attributes equal to <code>svgWidth</code> and <code>svgHeight</code> respectively.</p>

<p>The SVG is our graphics container that resides in our HTML document. Now we can use D3.js to create objects and append them to our <code>svg</code>. We accomplish this by generating the N-number (in this case 200) of circles that we&rsquo;ll later draw. These circles will be reside in an Array and will each contain the three necessary attributes: a center-x <code>cx</code>, center-y <code>cy</code>, and a radius <code>r</code>.</p>

<p>D3.js has a built-in <a href="https://github.com/mbostock/d3/wiki/Arrays#wiki-d3_range">range</a> function that iterates over a numeric sequence similar to Python&rsquo;s <a href="http://docs.python.org/library/functions.html#range">range</a> function. Since we need 200 randomly generated circles, let&rsquo;s enter 200 into the range function and map the returned object of each iteration into an array. Again, each object will contain the three circle properties mentioned previously. The code is as follows:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>index.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>!DOCTYPE html&gt;
</span><span class='line'><span class="nt">&lt;html&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>head<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>meta charset=&quot;utf-8&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>title<span class="ni">&amp;gt;</span>D3.js Context Menu Tutorial<span class="ni">&amp;lt;</span>/title<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>script type=&quot;text/javascript&quot; src=&quot;http://d3js.org/d3.v3.min.js&quot;<span class="ni">&amp;gt;&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/head<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>body<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>script type=&quot;text/javascript&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>        var svgWidth  = window.innerWidth
</span><span class='line'>         ,  svgHeight = window.innerHeight
</span><span class='line'>         ,  nodes = d3.range(200).map(function() { return {
</span><span class='line'>                radius: Math.random() * 12 + 4,
</span><span class='line'>                cx: Math.random() * svgWidth,
</span><span class='line'>                cy: Math.random() * svgHeight
</span><span class='line'>            }
</span><span class='line'>        });
</span><span class='line'>
</span><span class='line'>        // SVG we will draw to
</span><span class='line'>        var svg = d3.select(&quot;body&quot;).append(&quot;svg&quot;)
</span><span class='line'>            .attr(&quot;width&quot;, svgWidth)
</span><span class='line'>            .attr(&quot;height&quot;, svgHeight);
</span><span class='line'>    <span class="ni">&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/body<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here you can see the <code>nodes</code> array that holds our circle objects. You can view the array and its contents by opening your browser&rsquo;s JavaScript Developer&rsquo;s Console and typing:</p>

<pre><code>console.log(nodes);
</code></pre>

<p>Each circle&rsquo;s properties were generated using a combination of JavaScript&rsquo;s <code>Math.random()</code> and the <code>height</code> and <code>width</code> of the <code>SVG</code> element we accessed earlier. The <code>radius</code> calculation includes constants so that the circle is not smaller than size 4.</p>

<p>Now that we have our array of 200 circles, we need to draw them to the <code>svg</code> element. Here we will use D3&rsquo;s <a href="https://github.com/mbostock/d3/wiki/Selections#wiki-append">append() method</a> to append our nodes. We&rsquo;ll name each node as a &ldquo;circle&rdquo; and use the properties we generated earlier to set their respective graphical properties. The drawing code is:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Append each circle in nodes to SVG</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">nodes</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span> <span class="nx">nodes</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">cx</span><span class="p">)</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span> <span class="nx">nodes</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">cy</span><span class="p">)</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">nodes</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">radius</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the above code we simply loop through our array of circle nodes and for each node we append a circle object to our SVG element with their radius, center-x, and center-y having the values of the object at the current index.</p>

<p>At this point you can open / refresh the index.html page in your browser and should see 200 black circles of random size drawn at random positions. But black is boring, so let&rsquo;s finally finish this exercise by randomly coloring the circles.</p>

<p>To do this we will modify the appending code we just wrote to apply three styles (fill, stroke, and stroke-width). These are our circle&rsquo;s fill color, border color, and border width respectively. The code to do this is very similar to jQuery, Zepto, etc and is as follows:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Append each circle in nodes to SVG</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">nodes</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span> <span class="nx">nodes</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">cx</span><span class="p">)</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span> <span class="nx">nodes</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">cy</span><span class="p">)</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">nodes</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">radius</span><span class="p">)</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;hsl(&quot;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">360</span> <span class="o">+</span> <span class="s2">&quot;, 100%, 75%)&quot;</span> <span class="p">})</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;stroke&quot;</span><span class="p">,</span> <span class="s2">&quot;black&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;stroke-width&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The most complex piece of this added code is the random color generation. Here we calculate the fill value from the return value of a function that utilizes D3.js&rsquo;s <a href="https://github.com/mbostock/d3/wiki/Colors#wiki-d3_hsl">HSL color space method</a>. The parameters we pass to the method are <code>hue</code>, <code>saturation</code>, and <code>lightness</code>. Again we utilize JavaScript&rsquo;s <code>Math.random()</code> for the random hue generation and I have preset the saturation and lightness to my liking. You may tinker with these values to achieve different color variation. Finally we added a black border (stroke) of width 1 pixel.</p>

<p>And with that you should have successfully created an HTML page that is populated with 200 random circles using D3.js&hellip; Congratulations! Hopefully this tutorial has shown you the expressive power of Mike Bostock&rsquo;s library. In just a few short lines of code we have generated a dynamic graphic and that is only the absolute tip of the iceberg that is the D3.js library!</p>

<h2>Final Code</h2>

<p>Your final code should resemble:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>index.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>!DOCTYPE html&gt;
</span><span class='line'><span class="nt">&lt;html&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>head<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>meta charset=&quot;utf-8&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>title<span class="ni">&amp;gt;</span>D3.js Context Menu Tutorial<span class="ni">&amp;lt;</span>/title<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>script type=&quot;text/javascript&quot; src=&quot;http://d3js.org/d3.v3.min.js&quot;<span class="ni">&amp;gt;&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/head<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>body<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>script type=&quot;text/javascript&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>        var svgWidth  = window.innerWidth
</span><span class='line'>         ,  svgHeight = window.innerHeight
</span><span class='line'>         ,  nodes = d3.range(200).map(function() { return {
</span><span class='line'>              radius: Math.random() * 12 + 4,
</span><span class='line'>              cx: Math.random() * svgWidth - 50 ,
</span><span class='line'>              cy: Math.random() * svgHeight - 50 }
</span><span class='line'>            });
</span><span class='line'>
</span><span class='line'>        // SVG we will draw to
</span><span class='line'>        var svg = d3.select(&quot;body&quot;).append(&quot;svg&quot;)
</span><span class='line'>          .attr(&quot;width&quot;, svgWidth)
</span><span class='line'>          .attr(&quot;height&quot;, svgHeight);
</span><span class='line'>
</span><span class='line'>        // Append each circle in nodes to SVG
</span><span class='line'>        for (var i = 0; i <span class="ni">&amp;lt;</span> nodes.length; i++) {
</span><span class='line'>            svg.append(&quot;circle&quot;)
</span><span class='line'>               .attr(&quot;cx&quot;, nodes[i].cx)
</span><span class='line'>               .attr(&quot;cy&quot;, nodes[i].cy)
</span><span class='line'>               .attr(&quot;r&quot;, nodes[i].radius)
</span><span class='line'>               .attr(&quot;fill&quot;, function() { return &quot;hsl(&quot; + Math.random() * 360 + &quot;, 100%, 75%)&quot; })
</span><span class='line'>               .style(&quot;stroke&quot;, &quot;black&quot;)
</span><span class='line'>               .style(&quot;stroke-width&quot;, 1);
</span><span class='line'>        }
</span><span class='line'>    <span class="ni">&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/body<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Demo (<a href="http://jsfiddle.net/kevintcoughlin/JV62X/embedded/result/">fullscreen</a>)</h2>

<iframe width="100%" height="300" src="http://jsfiddle.net/kevintcoughlin/JV62X/embedded/js/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h2>Next</h2>

<p>In the next tutorial I will show you how to take the code we developed above and make it dynamic with both force and collision detection using D3.js' built-in functionality.</p>

<h2>Recommended Reading</h2>

<ul>
<li><a href="http://d3js.org/">D3.js Homepage</a></li>
<li><a href="https://github.com/mbostock/d3">D3.js Github Repo</a></li>
<li><a href="https://github.com/mbostock/d3/wiki">D3.js Documentation</a></li>
<li><a href="https://github.com/mbostock/d3/wiki/API-Reference">D3.js API Reference</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG">SVG Mozilla Developer Network Documentation</a></li>
</ul>


<h2>Revision History</h2>

<ul>
<li>Initial Publish &ndash; 07/01/2013</li>
</ul>

]]></content>
  </entry>
  
</feed>
